#BlueJ class context
comment0.target=Mycoplasma
comment0.text=\n\ Simplest\ form\ of\ life.\n\ Fun\ Fact\:\ Mycoplasma\ are\ one\ of\ the\ simplest\ forms\ of\ life.\ \ A\ type\ of\n\ bacteria,\ they\ only\ have\ 500-1000\ genes\!\ For\ comparison,\ fruit\ flies\ have\n\ about\ 14,000\ genes.\n\n\ @author\ Dimitrios\ Katsoulis\ (23051886),\ Siddhant\ Mohapatra\ (23007046)\n\ @version\ 2022.01.06\n
comment1.params=field\ location\ alivecol\ deadcol
comment1.target=Mycoplasma(Field,\ Location,\ javafx.scene.paint.Color,\ javafx.scene.paint.Color)
comment10.params=
comment10.target=void\ spreadDisease()
comment10.text=Make\ certain\ neighbours\ of\ a\ diseased\ cell\ (the\ ones\ that\ can\ actually\ be\ diseased)\ diseased
comment11.params=value
comment11.target=void\ setNextDiseasedState(boolean)
comment12.params=
comment12.target=void\ updateDiseased()
comment13.params=value
comment13.target=void\ setDiseased(boolean)
comment14.params=
comment14.target=void\ updateState()
comment2.params=
comment2.target=void\ act()
comment2.text=\n\ This\ is\ how\ the\ Mycoplasma\ decides\ if\ it\ will\ become\ diseased,\ and\ if\ it\ will\ be\ alive\ or\ not\ in\ the\ next\ generation\n
comment3.params=neighbours\ myClass
comment3.target=int\ countLivingNeighbours(java.util.List,\ java.lang.Class)
comment3.text=\n\ Counts\ the\ living\ neighbours\ of\ a\ specific\ class\ \n\ @param\ neighbours\ the\ list\ containing\ all\ living\ neighbour\ cells\n\ @param\ myClass\ the\ class\ type\ that\ is\ to\ be\ counted\n\ @return\ count\ the\ number\ of\ neighbours\ that\ are\ objects\ of\ the\ class\ specified\n
comment4.params=
comment4.target=void\ determineDisease()
comment4.text=Determines\ whether\ the\ object\ will\ contract\ a\ disease\ in\ this\ generation
comment5.params=isolation\ survival\ reproductionRate
comment5.target=void\ determineNextState(int,\ int,\ int)
comment5.text=\ Used\ to\ determine\ the\ next\ state\ of\ the\ object\ by\ combining\ the\ rules\ for\ staying\ alive,\ dying,\ reproducing\ and\ staying\ dead\n\ Achieves\ this\ by\ employing\ the\ aliveCell()\ and\ reproduction()\ methods\ \n\ @param\ isolation\ the\ minimum\ number\ of\ neighbours\ with\ which\ the\ cell\ can\ survive\n\ @param\ survival\ the\ ideal\ number\ of\ neighbours\ with\ which\ the\ cell\ can\ survive\n\ @param\ reproductionRate\ the\ number\ of\ neighbours\ needed\ for\ a\ dead\ cell\ to\ be\ born\ (become\ alive\ again)\n
comment6.params=isolation\ survival
comment6.target=boolean\ aliveCell(int,\ int)
comment6.text=Determines\ whether\ an\ alive\ cell\ will\ survive\ in\ the\ next\ generation\n\ @param\ isolation\ the\ minimum\ number\ of\ neighbours\ with\ which\ the\ cell\ can\ survive\n\ @param\ survival\ the\ ideal\ number\ of\ neighbours\ with\ which\ the\ cell\ can\ survive\n\ @return\ the\ next\ state\ (alive/dead)\ of\ the\ object\ \n
comment7.params=reproduction
comment7.target=boolean\ reproduction(int)
comment7.text=Determines\ whether\ a\ dead\ cell\ will\ be\ become\ alive\ or\ not\ in\ the\ next\ generation\n\ @\ param\ reproduction\ the\ number\ of\ neighbours\ needed\ for\ a\ dead\ cell\ to\ be\ born\ (become\ alive\ again)\n\ @return\ the\ next\ state\ (alive/dead)\ of\ the\ object\ \n
comment8.params=
comment8.target=void\ actDiseased()
comment8.text=Replaces\ the\ act()\ method\ seen\ above\ so\ that\ diseased\ cells\ have\ a\ new\ behaviour
comment9.params=wbcCount
comment9.target=boolean\ diseasedCell(int)
comment9.text=\ Replaces\ the\ aliceCell()\ method\ seen\ above\ so\ that\ the\ next\ state\ (alive/dead)\ of\ diseased\ cells\ can\ be\ determined\n\ @\ param\ wbcCount\ the\ number\ of\ alive\ white\ blood\ cell\ neighbours\n\ @return\ the\ next\ state\ (alive/dead)\ of\ the\ diseased\ object\ \n
numComments=15
