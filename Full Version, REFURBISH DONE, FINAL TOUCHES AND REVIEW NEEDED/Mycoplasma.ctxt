#BlueJ class context
comment0.target=Mycoplasma
comment0.text=\r\n\ Simplest\ form\ of\ life.\r\n\ Fun\ Fact\:\ Mycoplasma\ are\ one\ of\ the\ simplest\ forms\ of\ life.\ \ A\ type\ of\r\n\ bacteria,\ they\ only\ have\ 500-1000\ genes\!\ For\ comparison,\ fruit\ flies\ have\r\n\ about\ 14,000\ genes.\r\n\r\n\ @author\ Dimitrios\ Katsoulis\ (23051886),\ Siddhant\ Mohapatra\ (23007046)\r\n\ @version\ 2022.01.06\r\n
comment1.params=field\ location\ alivecol\ deadcol
comment1.target=Mycoplasma(Field,\ Location,\ javafx.scene.paint.Color,\ javafx.scene.paint.Color)
comment10.params=
comment10.target=void\ spreadDisease()
comment10.text=Make\ certain\ neighbours\ of\ a\ diseased\ cell\ (the\ ones\ that\ can\ actually\ be\ diseased)\ diseased
comment11.params=value
comment11.target=void\ setNextDiseasedState(boolean)
comment12.params=
comment12.target=void\ updateDiseased()
comment13.params=value
comment13.target=void\ setDiseased(boolean)
comment14.params=
comment14.target=void\ updateState()
comment14.text=\ \r\n\ Overrides\ the\ updateState()\ from\ the\ abstact\ class\ Cell,\ since\ with\ objects\ that\ inherit\ from\ Mycoplasma\ the\ isDiseased\ parameter\ needs\ to\ be\ updated\ along\ with\ alive.\r\n
comment2.params=
comment2.target=void\ act()
comment2.text=\r\n\ This\ is\ how\ the\ Mycoplasma\ decides\ if\ it\ will\ become\ diseased,\ and\ if\ it\ will\ be\ alive\ or\ not\ in\ the\ next\ generation\r\n
comment3.params=neighbours\ myClass
comment3.target=int\ countLivingNeighbours(java.util.List,\ java.lang.Class)
comment3.text=\r\n\ Counts\ the\ living\ neighbours\ of\ a\ specific\ class\ \r\n\ @param\ neighbours\ the\ list\ containing\ all\ living\ neighbour\ cells\r\n\ @param\ myClass\ the\ class\ type\ that\ is\ to\ be\ counted\r\n\ @return\ count\ the\ number\ of\ neighbours\ that\ are\ objects\ of\ the\ class\ specified\r\n
comment4.params=
comment4.target=void\ determineDisease()
comment4.text=Determines\ whether\ the\ object\ will\ contract\ a\ disease\ in\ this\ generation
comment5.params=isolation\ survival\ reproductionRate
comment5.target=void\ determineNextState(int,\ int,\ int)
comment5.text=\ Used\ to\ determine\ the\ next\ state\ of\ the\ object\ by\ combining\ the\ rules\ for\ staying\ alive,\ dying,\ reproducing\ and\ staying\ dead\r\n\ Achieves\ this\ by\ employing\ the\ aliveCell()\ and\ reproduction()\ methods\ \r\n\ @param\ isolation\ the\ minimum\ number\ of\ neighbours\ with\ which\ the\ cell\ can\ survive\r\n\ @param\ survival\ the\ ideal\ number\ of\ neighbours\ with\ which\ the\ cell\ can\ survive\r\n\ @param\ reproductionRate\ the\ number\ of\ neighbours\ needed\ for\ a\ dead\ cell\ to\ be\ born\ (become\ alive\ again)\r\n
comment6.params=isolation\ survival
comment6.target=boolean\ aliveCell(int,\ int)
comment6.text=Determines\ whether\ an\ alive\ cell\ will\ survive\ in\ the\ next\ generation\r\n\ @param\ isolation\ the\ minimum\ number\ of\ neighbours\ with\ which\ the\ cell\ can\ survive\r\n\ @param\ survival\ the\ ideal\ number\ of\ neighbours\ with\ which\ the\ cell\ can\ survive\r\n\ @return\ the\ next\ state\ (alive/dead)\ of\ the\ object\ \r\n
comment7.params=reproduction
comment7.target=boolean\ reproduction(int)
comment7.text=Determines\ whether\ a\ dead\ cell\ will\ be\ become\ alive\ or\ not\ in\ the\ next\ generation\r\n\ @\ param\ reproduction\ the\ number\ of\ neighbours\ needed\ for\ a\ dead\ cell\ to\ be\ born\ (become\ alive\ again)\r\n\ @return\ the\ next\ state\ (alive/dead)\ of\ the\ object\ \r\n
comment8.params=
comment8.target=void\ actDiseased()
comment8.text=\ Replaces\ the\ act()\ method\ seen\ above\ so\ that\ diseased\ cells\ have\ a\ new\ behaviour\r\n\ According\ to\ the\ rules\ a\ diseased\ cell\ will\ always\ be\ diseased\ hence\ why\ we\ immediately\ use\ setNextDiseasedState(true)\r\n\ The\ print\ statement\ is\ useful\ for\ testing\ purposes\r\n\ Additionally,\ since\ once\ dead\ a\ diseased\ cell\ will\ not\ be\ able\ to\ become\ alive,\ the\ method\ proceeds\ only\ if\ the\ diseased\ cell\ is\ alive\r\n
comment9.params=wbcCount
comment9.target=boolean\ diseasedCell(int)
comment9.text=\ Replaces\ the\ aliceCell()\ method\ seen\ above\ so\ that\ the\ next\ state\ (alive/dead)\ of\ diseased\ cells\ can\ be\ determined\r\n\ Note\ that\ the\ spreadDisease()\ method\ is\ only\ called\ on\ a\ specific\ condition,\ since\ a\ diseased\ alive\ cell\ is\ weakened\ and\ therefore\ cannot\ always\ survive\ and\ spread\ the\ disease\r\n\ @\ param\ wbcCount\ the\ number\ of\ alive\ white\ blood\ cell\ neighbours\r\n\ @return\ the\ next\ state\ (alive/dead)\ of\ the\ diseased\ object\ \r\n
numComments=15
